# The workflow_dispatch event allows you to manually trigger the workflow.
# The inputs section defines a required branch parameter, defaulting to main.
# Each step in the jobs section performs a specific task
# (e.g., code checkout, AI review, Snyk scan).

name: AI-Enhanced ChatOps Security Pipeline

on:
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v3
        with:
          python-version: "3.10"
          cache: "pip"
      - name: Install pre-commit
        run: |
          python -m pip install pre-commit
          pre-commit install
      - name: Run pre-commit
        run: pre-commit run --all-files

  editorconfig-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Check .editorconfig exists
        run: |
          if [ ! -f .editorconfig ]; then
            echo ".editorconfig file not found in root directory"
            exit 1
          fi
      - name: Install editorconfig-checker
        run: |
          npm install -g editorconfig-checker
          editorconfig-checker

  secrets-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Check for hardcoded secrets
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  markdown-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Run markdown lint with npx
        run: npx markdownlint-cli .

  #  code-lint:
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/checkout@v2
  #      - name: Set up Python
  #        uses: actions/setup-python@v3
  #        with:
  #          python-version: "3.10"
  #          cache: "pip"
  #      - name: Install linting tools
  #        run: pip install pylint flake8 flask
  #      - name: Lint Python code
  #        run: |
  #          find . -name '*.py' | xargs pylint
  #          flake8 .
  #
  #  unit-tests:
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/checkout@v2
  #      - name: Set up Python
  #        uses: actions/setup-python@v3
  #        with:
  #          python-version: "3.10"
  #          cache: "pip"
  #      - name: Run unit tests
  #        run: |
  #          cd app
  #          python -m unittest discover -v
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9" # Adjust based on your Python version

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt # requirements.txt

      # Run your script or tests
      - name: Run AI code review
        run: |
          python scripts/ai_code_review.py  # Replace with the script path
  analyze:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.ref }} # Use the branch specified during trigger

      - name: Run AI code review
        run: |
          echo "Running AI code review..."
          python scripts/ai_code_review.py
          echo "AI review complete."

      - name: Run Snyk security scan
        run: |
          echo "Running Snyk security scan..."
          snyk test --all-projects
          echo "Snyk scan complete."

      - name: Build Docker image
        run: |
          echo "Building Docker image..."
          docker build -t my-app:${{ github.sha }} .
          echo "Docker build complete."
