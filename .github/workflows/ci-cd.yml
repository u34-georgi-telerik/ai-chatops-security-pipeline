# The workflow_dispatch event allows you to manually trigger the workflow.
# The inputs section defines a required branch parameter, defaulting to main.
# Each step in the jobs section performs a specific task
# (e.g., code checkout, AI review, Snyk scan).

name: AI-Enhanced ChatOps Security Pipeline

on:
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v3
        with:
          python-version: "3.10"
          cache: "pip"
      - name: Install pre-commit
        run: |
          python -m pip install pre-commit
          pre-commit install
      - name: Run pre-commit
        run: pre-commit run --all-files

  #  editorconfig-check:
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/checkout@v2
  #      - name: Check .editorconfig exists
  #        run: |
  #          if [ ! -f .editorconfig ]; then
  #            echo ".editorconfig file not found in root directory"
  #            exit 1
  #          fi
  #      - name: Install editorconfig-checker
  #        run: |
  #          npm install -g editorconfig-checker
  #          editorconfig-checker

  secrets-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Check for hardcoded secrets
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  markdown-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Run markdown lint with npx
        run: npx markdownlint-cli .

  #  code-lint:
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/checkout@v2
  #      - name: Set up Python
  #        uses: actions/setup-python@v3
  #        with:
  #          python-version: "3.10"
  #          cache: "pip"
  #      - name: Install linting tools
  #        run: pip install pylint flake8 flask
  #      - name: Lint Python code
  #        run: |
  #          find . -name '*.py' | xargs pylint
  #          flake8 .
  #
  #  unit-tests:
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/checkout@v2
  #      - name: Set up Python
  #        uses: actions/setup-python@v3
  #        with:
  #          python-version: "3.10"
  #          cache: "pip"
  #      - name: Run unit tests
  #        run: |
  #          cd app
  #          python -m unittest discover -v
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9" # Adjust based on your Python version

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt # requirements.txt

      # Set the OPENAI_API_KEY environment variable
      - name: Set OpenAI API Key
        run: echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV

      # Run your script or tests
      - name: Run AI code review
        run: |
          python scripts/ai_code_review.py  # Replace with the script path
  analyze:
    needs:
      - pre-commit
      #  - editorconfig-check
      - secrets-check
      - markdown-check
      - build
    #      - code-lint
    #      - unit-tests

    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.ref }} # Use the branch specified during trigger

      - name: Add dependencies for openai
        run: |
          echo "Installing AI dependencies..."
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Set the OPENAI_API_KEY environment variable
      - name: Set OpenAI API Key
        run: echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV

      - name: Run AI code review
        run: |
          echo "Running AI code review..."
          python scripts/ai_code_review.py
          echo "AI review complete."
  checkov-scan:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    needs:
      - pre-commit
      - secrets-check
      - markdown-check
      - build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run Checkov scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: all
          output_format: sarif
          output_file_path: checkov-results.sarif
          soft_fail: true

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        if: success() || failure()
        with:
          sarif_file: checkov-results.sarif
          
  docker-build:
    needs:
      - analyze
      - checkov-scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: false
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/u34:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/u34:latest
  # Deploy to k8s
  deploy-k8s:
    needs: 
      - docker-build
      - snyk
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Checkout code
        uses: actions/checkout@v3
        with:
         token: ${{ secrets.GITHUB_PAT_TOKEN }}
      - name: Update Kubernetes manifests
        run: |
          sed -i "s|image: .*|image: ${{ secrets.DOCKERHUB_USERNAME }}/u34:${{ github.sha }}|" k8s/base/deployment.yaml
          
      - name: Commit and push updated manifests
        run: |
          git config --global user.name 'Georgi Hristov'
          git config --global user.email 'georgi.hristov.u34@learn.telerikacademy.com'
          git remote set-url origin https://${{ secrets.GITHUB_PAT_TOKEN }}@github.com/u34-georgi-telerik/ai-chatops-security-pipeline.git
          git add k8s/base/deployment.yaml
          git commit -m "Update image to ${{ github.sha }}"
          git push
  snyk:
    needs: docker-build
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Debug the directory structure
      - name: Debug Directory Structure
        run: |
          pwd
          ls -la
          ls -la scripts/
      # Install Snyk CLI
      - name: Install Snyk CLI
        run: npm install -g snyk

      # Authenticate Snyk
      - name: Authenticate Snyk
        run: snyk auth "${{ secrets.SNYK_TOKEN }}"

      - name: Run Snyk security scan (Python with JSON output)
        continue-on-error: true
        run: |
          mkdir -p reports
          snyk test --json > reports/snyk_python_report.json \
          || echo '{"vulnerabilities":[]}' > reports/snyk_python_report.json
          python scripts/format_snyk_results.py
          ls -la  # Debug: List files
          pwd    # Debug: Show current directory

          # Process Snyk results
      - name: Format Snyk results
        run: |
          python scripts/format_snyk_results.py
