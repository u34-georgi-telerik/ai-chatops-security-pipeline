name: AI-Enhanced ChatOps Security Pipeline

# This workflow is triggered manually, allowing on-demand execution
on:
  workflow_dispatch:
    inputs:
      trigger:  # Optional input for logging the reason for triggering
        description: "Reason for triggering the workflow"
        required: false

jobs:
  # Runs pre-commit hooks to validate code formatting and style
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3  # Checks out the repository code
      - uses: actions/setup-python@v3  # Sets up Python environment
        with:
          python-version: "3.10"
          cache: "pip"
      - name: Install and run pre-commit hooks
        run: |
          pip install pre-commit
          pre-commit run --all-files

  # Scans for hardcoded secrets using Gitleaks
  secrets-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3  # Checks out the repository code
      - name: Scan for hardcoded secrets
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Validates Markdown files for proper formatting
  markdown-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3  # Checks out the repository code
      - name: Run markdown lint
        run: npx markdownlint-cli .

  # Installs dependencies and builds the project
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3  # Checks out the repository code
      - uses: actions/setup-python@v3  # Sets up Python environment
        with:
          python-version: "3.9"
          cache: "pip"
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

  # Performs an AI-powered code review
  analyze:
    needs: [pre-commit, secrets-check, markdown-check, build]  # Waits for prior jobs to complete
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3  # Checks out the repository for the specific branch
        with:
          ref: ${{ github.event.ref }}
      - name: Install dependencies for AI analysis
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
      - name: AI code review
        run: python scripts/ai_code_review.py

  # Scans infrastructure and IaC files using Checkov
  checkov-scan:
    needs: [pre-commit, secrets-check, markdown-check, build]  # Depends on earlier validation steps
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3  # Checks out the repository code
      - name: Run Checkov scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .  # Scans the entire repository
          framework: all  # Checks all supported frameworks
          output_format: sarif  # Outputs results in SARIF format
          output_file_path: checkov-results.sarif  # Saves the results to a file
          soft_fail: true  # Allows the pipeline to continue on failures
      - name: Upload SARIF results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov-results.sarif

  # Builds and pushes a Docker image to Docker Hub
  docker-build:
    needs: [analyze, checkov-scan]  # Requires analysis and scanning jobs to complete
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3  # Checks out the repository code
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .  # Specifies the build context
          push: true  # Pushes the image to the registry
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/u34:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/u34:latest
  # Scans the Docker image for vulnerabilities using Snyk
  snyk-scan:
    needs: [docker-build]  # Waits for the Docker image to be built
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3  # Checks out the repository code
      - name: Install Snyk CLI
        run: npm install -g snyk
      - name: Authenticate Snyk
        run: snyk auth "${{ secrets.SNYK_TOKEN }}"
      - name: Run Snyk scan
        run: snyk test

  # Deploys the application to a Kubernetes cluster using ArgoCD
  deploy-k8s:
    needs: [docker-build]  # Waits for the Docker image to be built
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3  # Checks out the repository code
      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o /usr/local/bin/argocd \
            https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x /usr/local/bin/argocd
      - name: Update Kubernetes manifests with the latest image
        run: |
          sed -i "s|image: .*|image: ${{ secrets.DOCKERHUB_USERNAME }}/u34:${{ github.sha }}|" \
            k8s/base/deployment.yaml
      - name: Commit and push updated manifests
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add k8s/base/deployment.yaml
          git commit -m "Update image to ${{ github.sha }}"
          git push
      - name: Trigger ArgoCD Sync
        run: |
          argocd app sync my-app \
            --auth-token=${{ secrets.ARGOCD_AUTH_TOKEN }} \
            --server=https://${{ secrets.ARGOCD_SERVER }} \
            --insecure

  # Sets up monitoring tools like Grafana and Prometheus
  monitoring:
    needs: [deploy-k8s]  # Requires the deployment to Kubernetes to be complete
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3  # Checks out the repository code
      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
      - name: Deploy Grafana and Prometheus
        run: |
          helm upgrade --install grafana grafana/grafana \
            --namespace monitoring --create-namespace
          helm upgrade --install prometheus prometheus-community/prometheus \
            --namespace monitoring
      - name: Verify Monitoring Setup
        run: |
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=grafana \
            -n monitoring --timeout=300s
          kubectl wait --for=condition=ready pod -l app=prometheus \
            -n monitoring --timeout=300s
